// Generated by CoffeeScript 1.3.3
var Commit, Commits, Repo, Repos, Revfeed, Templates,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Commit = (function(_super) {

  __extends(Commit, _super);

  function Commit() {
    this.formattedTime = __bind(this.formattedTime, this);
    return Commit.__super__.constructor.apply(this, arguments);
  }

  Commit.configure("Commit", "author", "message", "time");

  Commit.belongsTo("repo", "Repo");

  Commit.prototype.formattedTime = function() {
    return moment(this.time).calendar();
  };

  return Commit;

})(Spine.Model);

Repo = (function(_super) {

  __extends(Repo, _super);

  Repo.configure("Repo", "name", "path", "commits");

  Repo.hasMany("commits", "Commit");

  Repo.extend(Spine.Model.Ajax);

  Repo.extend({
    url: "/api/repos",
    fromJSON: function(objects) {
      var repo, _i, _len, _ref, _results;
      if (!objects) {
        return;
      }
      _ref = objects.repos;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        repo = _ref[_i];
        _results.push(new Repo(repo));
      }
      return _results;
    }
  });

  function Repo(objects) {
    var commit, _i, _len, _ref;
    Repo.__super__.constructor.apply(this, arguments);
    _ref = objects.commits;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      commit = _ref[_i];
      this.commits().create(commit);
    }
  }

  return Repo;

})(Spine.Model);

Revfeed = (function(_super) {

  __extends(Revfeed, _super);

  function Revfeed() {
    this.addRepos = __bind(this.addRepos, this);

    this.addRepo = __bind(this.addRepo, this);
    Revfeed.__super__.constructor.apply(this, arguments);
    Repo.bind("create", this.addRepo);
    Repo.bind("refresh", this.addRepos);
    Repo.fetch();
  }

  Revfeed.prototype.addRepo = function(repo) {
    var view;
    view = new Repos({
      item: repo
    });
    return this.el.append(view.render().el);
  };

  Revfeed.prototype.addRepos = function() {
    this.el.empty();
    return Repo.each(this.addRepo);
  };

  return Revfeed;

})(Spine.Controller);

Repos = (function(_super) {

  __extends(Repos, _super);

  Repos.prototype.tag = "div";

  Repos.prototype.className = "repo";

  Repos.prototype.events = {
    "click .more": "more"
  };

  Repos.prototype.elements = {
    ".commits": "$commits",
    ".more": "$more"
  };

  function Repos() {
    this.more = __bind(this.more, this);

    this.addCommits = __bind(this.addCommits, this);

    this.addCommit = __bind(this.addCommit, this);

    this.render = __bind(this.render, this);
    Repos.__super__.constructor.apply(this, arguments);
    this.item.commits().model.bind("refresh", this.addCommits);
    this.item.commits().model.bind("create", this.addCommit);
  }

  Repos.prototype.render = function() {
    this.html(Templates.repo(this.item));
    this.addCommits(this.item.commits().all());
    if (!this.item.next) {
      this.$(".more").hide();
    }
    return this;
  };

  Repos.prototype.addCommit = function(commit) {
    var view;
    view = new Commits({
      item: commit
    });
    return this.$commits.append(view.render().el);
  };

  Repos.prototype.addCommits = function(commits) {
    return commits.map(this.addCommit);
  };

  Repos.prototype.more = function() {
    if (!this.item.next) {
      this.$(".more").hide();
    }
  };

  return Repos;

})(Spine.Controller);

Commits = (function(_super) {

  __extends(Commits, _super);

  function Commits() {
    this.render = __bind(this.render, this);
    return Commits.__super__.constructor.apply(this, arguments);
  }

  Commits.prototype.tag = "li";

  Commits.prototype.className = "commit";

  Commits.prototype.render = function() {
    this.html(Templates.commit(this.item));
    return this;
  };

  return Commits;

})(Spine.Controller);

Templates = {};

$(function() {
  Mustache.tags = ["<%", "%>"];
  Templates.repo = Mustache.compile($("#repo-template").remove().html());
  Templates.commit = Mustache.compile($("#commit-template").remove().html());
  return new Revfeed({
    el: $("#revfeed")
  });
});
