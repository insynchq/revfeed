// Generated by CoffeeScript 1.3.3
var Commit, CommitItem, Revfeed, RevfeedCommit, Templates,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Commit = (function(_super) {

  __extends(Commit, _super);

  function Commit() {
    this.formattedTime = __bind(this.formattedTime, this);
    return Commit.__super__.constructor.apply(this, arguments);
  }

  Commit.configure("Commit", "author_avatar", "author_name", "author_email", "message", "time");

  Commit.extend(Spine.Model.Ajax);

  Commit.prototype.formattedTime = function() {
    return moment.utc(this.time * 1000).calendar();
  };

  return Commit;

})(Spine.Model);

RevfeedCommit = (function(_super) {

  __extends(RevfeedCommit, _super);

  function RevfeedCommit() {
    return RevfeedCommit.__super__.constructor.apply(this, arguments);
  }

  RevfeedCommit.extend({
    url: "/api/revfeed",
    fromJSON: function(objects) {
      var commit, _i, _len, _ref, _results;
      if (!objects) {
        return;
      }
      this.nextURL = objects.next_url;
      _ref = objects.commits;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        commit = _ref[_i];
        _results.push(new RevfeedCommit(commit));
      }
      return _results;
    }
  });

  return RevfeedCommit;

})(Commit);

Revfeed = (function(_super) {

  __extends(Revfeed, _super);

  Revfeed.prototype.elements = {
    ".commits": "$commits",
    ".more": "$more"
  };

  Revfeed.prototype.events = {
    "click .more a": "more"
  };

  function Revfeed() {
    this.more = __bind(this.more, this);

    this.addAll = __bind(this.addAll, this);

    this.addOne = __bind(this.addOne, this);
    Revfeed.__super__.constructor.apply(this, arguments);
    RevfeedCommit.bind("refresh", this.addAll);
    RevfeedCommit.bind("create", this.addOne);
    RevfeedCommit.fetch();
    return;
  }

  Revfeed.prototype.addOne = function(commit) {
    commit = new CommitItem({
      item: commit
    });
    this.$commits.append(commit.render().el);
  };

  Revfeed.prototype.addAll = function() {
    this.$commits.empty();
    RevfeedCommit.each(this.addOne);
  };

  Revfeed.prototype.more = function(e) {
    e.preventDefault();
    RevfeedCommit.fetch({
      url: RevfeedCommit.nextURL,
      success: this.proxy(function(objects) {
        if (!objects.next_url) {
          return this.$more.hide();
        }
      })
    });
  };

  return Revfeed;

})(Spine.Controller);

CommitItem = (function(_super) {

  __extends(CommitItem, _super);

  function CommitItem() {
    this.render = __bind(this.render, this);
    return CommitItem.__super__.constructor.apply(this, arguments);
  }

  CommitItem.prototype.tag = "li";

  CommitItem.prototype.className = "commit";

  CommitItem.prototype.render = function() {
    this.html(Templates.commit(this.item));
    return this;
  };

  return CommitItem;

})(Spine.Controller);

Templates = {};

$(function() {
  Mustache.tags = ["<%", "%>"];
  Templates.commit = Mustache.compile($("#commit-template").remove().html());
  return new Revfeed({
    el: $("#revfeed")
  });
});
